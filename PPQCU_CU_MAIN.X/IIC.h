/* 
 * File:   IIC.h
 * Author: Philipp
 *
 * Created on February 4, 2016, 1:27 PM
 */

#ifndef IIC_H
#define	IIC_H

#ifdef	__cplusplus
extern "C" {
#endif
#include "config.h"

    typedef enum {
        IIC1 = 1,
        IIC2 = 2
    } IIC_CHANNEL;


    void IIC_init(IIC_CHANNEL, int, int);

#define IIC_INITF_STOP_IN_IDLE 0x00002000
#define IIC_INITF_CONTINUE_IN_IDLE 0x00000000

#define IIC_INITF_STRICT_ADR 0x00000800
#define IIC_INITF_NOT_STRICT_ADR 0x00000000

#define IIC_INITF_10BIT_ADR 0x00000400
#define IIC_INITF_7BIT_ADR  0x00000000

#define IIC_INTIF_ENABLE_SLEW_CONTROL 0x00000000
#define IIC_INITF_DISABLE_SLEW_CONTROL 0x00000200

#define IIC_INITF_USE_SMBUS_LEVELS 0x00000100

#define IIC_INITF_ACK_SEND_ACK 0x00000000
#define IIC_INITF_ACK_SEND_NACK 0x00000010    

#define IIC_INITF_ENABLE_GEN_CALL  0x00000080
#define IIC_INITF_DISABLE_GEN_CALL 0x00000000

#define IIC_INITF_ENABLE_CLOCK_STRETCHING  0x00000040 
#define IIC_INITF_DISABLE_CLOCK_STRETCHING 0x00000000

    typedef enum {
        IIC_READ = 1,
        IIC_WRITE = 0
    } IIC_OPERATION;

    typedef enum {
        //A0000000 00000000 XXXXXXXX XXXXXXXX
        //A: 1 = CON register, 0 = Status register
        //X: Bit mask
        IIC_STAT_CLKSTRETCH =          0b10000000000000000000000001000000,
        IIC_STAT_RECEIVE =             0b10000000000000000000000000001000,
        IIC_STAT_START =               0b10000000000000000000000000000001,
        IIC_STAT_STOP =                0b10000000000000000000000000000100,
        IIC_STAT_RESTART =             0b10000000000000000000000000000010,
        IIC_STAT_ACK_SENT =            0b10000000000000000000000000010000,
        IIC_STAT_ACK =                 0b00000000000000001000000000000000,
        IIC_STAT_TRANSMIT =            0b00000000000000000100000000000000,
        IIC_STAT_MASTER_COLLISION =    0b00000000000000000000010000000000,
        IIC_STAT_GENERAL_CALL =        0b00000000000000000000001000000000,
        IIC_STAT_10BIT_MATCH =         0b00000000000000000000000100000000,
        IIC_STAT_WRITE_COLLOSION =     0b00000000000000000000000010000000,
        IIC_STAT_RECEIVE_OVERFLOW =    0b00000000000000000000000001000000,
        IIC_STAT_DATA_NADDRESS =       0b00000000000000000000000000100000,
        IIC_STAT_STOP_DET =            0b00000000000000000000000000010000,
        IIC_STAT_START_DET =           0b00000000000000000000000000001000,
        IIC_STAT_READ_NWRITE_DET =     0b00000000000000000000000000000100,
        IIC_STAT_RECEIVE_FULL =        0b00000000000000000000000000000010,
        IIC_STAT_TRANSMIT_FULL =       0b00000000000000000000000000000001,
    } IIC_STATUS;

void IIC_init(IIC_CHANNEL channel, int flags, int baud);
void IIC_clkstretch(IIC_CHANNEL channel);
void IIC_receive(IIC_CHANNEL channel);
void IIC_stop(IIC_CHANNEL channel);
void IIC_start(IIC_CHANNEL channel);
void IIC_restart(IIC_CHANNEL channel);
void IIC_ack(IIC_CHANNEL channel);
BOOL IIC_status(IIC_CHANNEL channel, IIC_STATUS stat);
void IIC_address(IIC_CHANNEL channel, char address, IIC_OPERATION op);
void IIC_put(IIC_CHANNEL channel,char data);
char IIC_get(IIC_CHANNEL channel);

#ifdef	__cplusplus
}
#endif

#endif	/* IIC_H */

